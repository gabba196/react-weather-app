{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","titles","components_form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.040fbec0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Titles extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n            <h1 className=\"title-container__title\">Weather Finder</h1>\r\n            <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Titles;   ","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n            <form onSubmit={this.props.getWeather}>\r\n            <input type=\"text\" name=\"city\" placeholder=\"City..\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country..\" />\r\n            <button>Get Weather</button>\r\n            </form>\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nclass Weather extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"weather__info\">\r\n\r\n            { this.props.city && this.props.country && <p className=\"weather__key\">Location: <span className=\"weather__value\">{this.props.city}, {this.props.country}</span></p> }\r\n            { this.props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{this.props.temperature} Kelvin</span></p> }\r\n            { this.props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{this.props.humidity}</span></p> }\r\n            { this.props.description && <p className=\"weather__key\">Conditions: <span className=\"weather__value\">{this.props.description}</span></p> }\r\n            { this.props.error && <p className=\"weather__error\">{this.props.error}</p> }\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;\r\n","import React from \"react\";\n\nimport Titles from \"./components/titles\"; \nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nconst API_KEY = '0c2ad861cf1f9cb8def5ffbe06640b25';\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${API_KEY}`);\n    const data = await api_call.json();\n    if (city && country) {\n    console.log(data);\n    this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: ''\n    });\n  } else {\n    this.setState({\n      temperature: undefined,\n      city: undefined,\n      country: undefined,\n      humidity: undefined,\n      description: undefined,\n      error: 'Please enter the values.'\n    });\n  }\n}\n\n\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather} />\n                <Weather \n                  temperature={this.state.temperature} \n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error} \n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n    }\n  };\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport './index.css';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}